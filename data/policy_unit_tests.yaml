unit_test_policy:
  version: "1.0"
  generated_for: "IA Agent - Test Generator"
  last_updated: "2025-07-10"

  naming:
    style: "human_readable_sentence"
    examples:
      - "should_return_false_when_balance_is_insufficient"
      - "should_throw_error_when_user_is_not_authenticated"
      - "deve_retornar_erro_quando_usuario_estiver_desconectado"
    guidelines:
      - "Use sentenças descritivas que expressem comportamento esperado"
      - "Evite acoplamento a nomes internos de métodos ou variáveis"
      - "Use snake_case ou camelCase conforme a linguagem exigir"
      - "Use prefixos como 'should_', 'deve_', 'quando_', 'retorna_'"

  structure:
    format: "AAA"  # Arrange, Act, Assert
    steps:
      - arrange: "Configure os dados, mocks e contexto necessários"
      - act: "Execute a ação ou função sob teste"
      - assert: "Verifique o comportamento ou valor esperado"
    example_structure:
      - "Dado que uma conta tem saldo zero"
      - "Quando uma retirada é solicitada"
      - "Então deve retornar erro de saldo insuficiente"

  organization:
    project_folders:
      source_code: "/src/<project_name>/"
      test_code: "/tests/<project_name>.Tests/"
    test_file_naming:
      pattern: "<ClassName>Should"  # ex: BankAccountShould
    test_grouping:
      - "Organizar testes por componente ou classe principal"
      - "Testes relacionados a métodos similares podem estar no mesmo arquivo"

  quality_criteria:
    - "Testes devem ser rápidos (execução em milissegundos)"
    - "Devem ser determinísticos (sem flutuação de resultados)"
    - "Isolados de dependências externas (sem acesso real à rede, banco ou tempo)"
    - "Utilizar mocks, stubs ou fakes para dependências externas"
    - "Testes devem ser autoexplicativos sem necessidade de comentários"
    - "Cobrir caminhos principais, bordas e exceções de forma independente"

  test_design:
    test_type: "unit"
    mock_usage: "true"
    coverage_expectation:
      min_expected_coverage: 80  # percentual
      required_for: ["critical modules", "core business logic"]
    language_independent_expectations:
      - "Os testes devem refletir regras de negócio, não apenas cobertura técnica"
      - "Um teste por cenário, evitando múltiplos asserts se possível"
      - "Falhas devem fornecer mensagens claras sobre a causa do erro"

  agent_instructions:
    expected_input: "Código-fonte em linguagem suportada, em texto puro ou estruturado"
    expected_output: 
      - "Arquivo ou trecho de teste com nomes claros e estruturado conforme esta política"
      - "Uso explícito de AAA"
      - "Inclusão de mocks quando detectadas dependências externas"
    fallback_behavior:
      - "Se houver ambiguidade, gerar o teste mais simples possível e sinalizar incerteza"
      - "Nunca inventar lógicas de negócio: basear-se apenas no código fornecido"
