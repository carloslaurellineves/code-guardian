"""
P√°gina Code Fixer do CodeGuardian usando Streamlit.

Esta p√°gina permite ao usu√°rio identificar e corrigir bugs
a partir da mensagem de erro e do c√≥digo relevante.
"""

import streamlit as st
from pathlib import Path
import sys
import requests

# Adicionar diret√≥rio raiz ao path
root_dir = Path(__file__).parent.parent.parent
sys.path.insert(0, str(root_dir))

from app.utils.session_state import get_session_value, set_session_value


class CodeFixerPage:
    """
    Classe representando a p√°gina Code Fixer.
    """
    
    def __init__(self):
        self.api_base_url = get_session_value("api_base_url", "http://localhost:8000/api/v1")

    def render(self):
        """
        Renderiza a p√°gina Code Fixer no Streamlit.
        """
        st.title("üõ†Ô∏è Code Fixer")
        
        # Explica√ß√£o da funcionalidade
        st.markdown("## Identifica√ß√£o e Corre√ß√£o de Bugs")
        st.info(
            """
            Esta ferramenta ajuda a identificar e corrigir bugs de c√≥digo com base
            na descri√ß√£o do erro e no trecho de c√≥digo fornecido.
            """
        )
        
        # Instru√ß√µes de uso
        with st.expander("üìñ Como usar"):
            st.markdown("""
            1. **Descreva a mensagem de erro e o c√≥digo problem√°tico**: Informe detalhes claros.
            2. **Clique em Corrigir**: O agente analisar√° o c√≥digo e sugerir√° corre√ß√µes.
            3. **Revise e ajuste**: Valide se as corre√ß√µes atendem suas expectativas.
            """)

        # Separador
        st.markdown("---")
        
        # Entrada de dados
        st.markdown("## üìù Descri√ß√£o do Bug e C√≥digo")

        # Mensagem de erro
        error_message = st.text_area(
            "Informe a mensagem de erro:",
            height=80,
            placeholder="Exemplo: NameError: name 'variavel' is not defined"
        )
        set_session_value("error_message", error_message)

        # C√≥digo problem√°tico
        bug_code = st.text_area(
            "Insira o c√≥digo problem√°tico:",
            height=200,
            placeholder="Cole aqui o trecho de c√≥digo que gerou o bug"
        )
        set_session_value("bug_code", bug_code)
        
        # Bot√£o para corrigir c√≥digo
        if st.button("üöÄ Corrigir C√≥digo"):
            if error_message.strip() and bug_code.strip():
                self._fix_code(error_message, bug_code)
            else:
                st.error("‚ùå Informe tanto a mensagem de erro quanto o c√≥digo problem√°tico.")
        
        # √Årea de resultados
        self._display_results()
    
    def _fix_code(self, error_message: str, bug_code: str):
        """
        Corrige o c√≥digo usando a API do backend.
        
        Args:
            error_message: Mensagem de erro fornecida pelo usu√°rio
            bug_code: C√≥digo fonte com o bug
        """
        set_session_value("fix_loading", True)
        
        with st.spinner("üîß Corrigindo c√≥digo... Por favor, aguarde."):
            try:
                payload = {
                    "error_message": error_message,
                    "code": bug_code
                }
                response = requests.post(
                    f"{self.api_base_url}/fix/bugs",
                    json=payload
                )
                
                if response.status_code == 200:
                    fixed_code = response.json().get("fixed_code", "")
                    set_session_value("fixed_code", fixed_code)
                    st.success("‚úÖ C√≥digo corrigido com sucesso!")
                else:
                    st.error(f"‚ùå Erro na API: {response.status_code} - {response.text}")
            except requests.exceptions.ConnectionError:
                st.error("‚ùå N√£o foi poss√≠vel conectar √† API. Verifique se o backend est√° rodando.")
            except Exception as e:
                st.error(f"‚ùå Erro inesperado: {str(e)}")
        
        set_session_value("fix_loading", False)
    
    def _display_results(self):
        """
        Exibe o c√≥digo corrigido.
        """
        fixed_code = get_session_value("fixed_code")

        if fixed_code:
            st.markdown("## üîß C√≥digo Corrigido")
            st.code(fixed_code, language="python")

            # Bot√£o para limpar resultados
            if st.button("üóëÔ∏è Limpar Resultados", key="clear_fix_results"):
                set_session_value("fixed_code", None)
                st.experimental_rerun()
