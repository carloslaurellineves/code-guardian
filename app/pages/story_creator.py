"""
P√°gina Story Creator do CodeGuardian usando Streamlit.

Esta p√°gina permite ao usu√°rio criar hist√≥rias e crit√©rios de aceite
usando metodologias √°geis e linguagem Gherkin.
"""

import streamlit as st
import requests
import json
from typing import Dict, Any
from pathlib import Path
import sys

# Adicionar diret√≥rio raiz ao path
root_dir = Path(__file__).parent.parent.parent
sys.path.insert(0, str(root_dir))

from app.utils.session_state import get_session_value, set_session_value, add_to_history


class StoryCreatorPage:
    """
    Classe representando a p√°gina Story Creator.
    """
    
    def __init__(self):
        self.api_base_url = get_session_value("api_base_url", "http://localhost:8000/api/v1")
    
    def render(self):
        """
        Renderiza a p√°gina Story Creator no Streamlit.
        """
        st.title("üß± Story Creator")
        
        # Explica√ß√£o da funcionalidade
        st.markdown("## Gera√ß√£o de Hist√≥rias em Formato Gherkin")
        st.info(
            """
            Esta ferramenta gera √©picos, hist√≥rias e tarefas seguindo metodologias √°geis.
            Os artefatos s√£o criados no padr√£o **Gherkin** (Given-When-Then) para garantir
            clareza e ader√™ncia √†s diretrizes de qualidade.
            """
        )
        
        # Instru√ß√µes de uso
        with st.expander("üìñ Como usar"):
            st.markdown("""
            1. **Descreva o contexto**: Forne√ßa informa√ß√µes sobre o produto ou funcionalidade
            2. **Seja espec√≠fico**: Inclua detalhes sobre o objetivo, usu√°rios e requisitos
            3. **Clique em Gerar**: O agente criar√° hist√≥rias estruturadas para voc√™
            4. **Revise e ajuste**: Valide se as hist√≥rias atendem suas expectativas
            """)
        
        # Separador
        st.markdown("---")
        
        # √Årea de input
        st.markdown("## üìù Entrada de Contexto")
        
        # Campo de texto para contexto
        context_input = st.text_area(
            "Descreva o contexto do produto ou funcionalidade:",
            value=get_session_value("story_context", ""),
            height=150,
            placeholder="Exemplo: Desenvolver uma funcionalidade de login para um sistema de gest√£o de usu√°rios corporativo. O sistema deve permitir autentica√ß√£o via Active Directory e manter sess√µes seguras...",
            help="Quanto mais detalhado for o contexto, melhor ser√° a qualidade das hist√≥rias geradas."
        )
        
        # Salvar contexto na sess√£o
        set_session_value("story_context", context_input)
        
        # Bot√£o para gerar hist√≥rias
        col1, col2, col3 = st.columns([1, 1, 1])
        
        with col2:
            if st.button(
                "üöÄ Gerar Hist√≥rias",
                disabled=not context_input.strip(),
                key="generate_stories_btn"
            ):
                self._generate_stories(context_input)
        
        # Separador
        st.markdown("---")
        
        # √Årea de resultados
        self._display_results()
        
        # Hist√≥rico de opera√ß√µes
        self._display_history()
    
    def _generate_stories(self, context: str):
        """
        Gera hist√≥rias usando a API do backend.
        
        Args:
            context: Contexto fornecido pelo usu√°rio
        """
        set_session_value("story_loading", True)
        
        with st.spinner("ü§ñ Gerando hist√≥rias... Por favor, aguarde."):
            try:
                # Preparar dados para API
                payload = {
                    "context": context,
                    "format": "gherkin",
                    "include_acceptance_criteria": True
                }
                
                # Fazer requisi√ß√£o √† API
                response = requests.post(
                    f"{self.api_base_url}/stories/generate",
                    json=payload,
                    timeout=30
                )
                
                if response.status_code == 200:
                    result = response.json()
                    set_session_value("generated_stories", result)
                    add_to_history("story_generation", result)
                    st.success("‚úÖ Hist√≥rias geradas com sucesso!")
                else:
                    st.error(f"‚ùå Erro na API: {response.status_code} - {response.text}")
                    
            except requests.exceptions.ConnectionError:
                st.error("‚ùå N√£o foi poss√≠vel conectar √† API. Verifique se o backend est√° rodando.")
                # Mock para desenvolvimento
                self._generate_mock_stories(context)
            except requests.exceptions.Timeout:
                st.error("‚è±Ô∏è Timeout na requisi√ß√£o. Tente novamente.")
            except Exception as e:
                st.error(f"‚ùå Erro inesperado: {str(e)}")
        
        set_session_value("story_loading", False)
    
    def _generate_mock_stories(self, context: str):
        """
        Gera hist√≥rias mockadas para desenvolvimento.
        
        Args:
            context: Contexto fornecido pelo usu√°rio
        """
        mock_result = {
            "epic": {
                "title": "Sistema de Autentica√ß√£o Corporativa",
                "description": "Como desenvolvedor, quero implementar um sistema de autentica√ß√£o robusto para garantir seguran√ßa e controle de acesso.",
                "acceptance_criteria": [
                    "Integra√ß√£o com Active Directory",
                    "Sess√µes seguras com timeout",
                    "Log de auditoria"
                ]
            },
            "stories": [
                {
                    "title": "Login com Active Directory",
                    "description": "Como usu√°rio corporativo, quero fazer login usando minha conta do AD para acessar o sistema de forma segura.",
                    "gherkin": """
Funcionalidade: Login com Active Directory
    
Cen√°rio: Login bem-sucedido
    Dado que o usu√°rio possui uma conta v√°lida no AD
    Quando ele inserir suas credenciais corretas
    Ent√£o ele deve ser autenticado com sucesso
    E deve ser redirecionado para a p√°gina inicial

Cen√°rio: Falha na autentica√ß√£o
    Dado que o usu√°rio inseriu credenciais inv√°lidas
    Quando ele tentar fazer login
    Ent√£o deve ser exibida uma mensagem de erro
    E o sistema deve registrar a tentativa de login falhada
                    """,
                    "acceptance_criteria": [
                        "Valida√ß√£o de credenciais via LDAP",
                        "Timeout de sess√£o configur√°vel",
                        "Mensagens de erro claras"
                    ]
                }
            ],
            "tasks": [
                {
                    "title": "Implementar conex√£o LDAP",
                    "description": "Configurar e implementar conex√£o com servidor LDAP do AD",
                    "estimate": "5 story points"
                },
                {
                    "title": "Criar interface de login",
                    "description": "Desenvolver tela de login responsiva",
                    "estimate": "3 story points"
                }
            ]
        }
        
        set_session_value("generated_stories", mock_result)
        add_to_history("story_generation", mock_result)
        st.info("üí° Usando dados mockados para desenvolvimento")
    
    def _display_results(self):
        """
        Exibe os resultados das hist√≥rias geradas.
        """
        stories = get_session_value("generated_stories")
        
        if stories:
            st.markdown("## üìã Hist√≥rias Geradas")
            
            # √âpico
            if "epic" in stories:
                st.markdown("### üéØ √âpico")
                epic = stories["epic"]
                st.markdown(f"**{epic['title']}**")
                st.markdown(epic['description'])
                
                if epic.get('acceptance_criteria'):
                    st.markdown("**Crit√©rios de Aceite:**")
                    for criteria in epic['acceptance_criteria']:
                        st.markdown(f"- {criteria}")
                
                st.markdown("---")
            
            # Hist√≥rias
            if "stories" in stories:
                st.markdown("### üìñ Hist√≥rias de Usu√°rio")
                
                for i, story in enumerate(stories["stories"], 1):
                    with st.expander(f"Hist√≥ria {i}: {story['title']}", expanded=True):
                        st.markdown(f"**Descri√ß√£o:** {story['description']}")
                        
                        if story.get('gherkin'):
                            st.markdown("**Gherkin:**")
                            st.code(story['gherkin'], language="gherkin")
                        
                        if story.get('acceptance_criteria'):
                            st.markdown("**Crit√©rios de Aceite:**")
                            for criteria in story['acceptance_criteria']:
                                st.markdown(f"- {criteria}")
                        
                        # Bot√£o para copiar
                        if st.button(f"üìã Copiar Hist√≥ria {i}", key=f"copy_story_{i}"):
                            st.success(f"Hist√≥ria {i} copiada!")
            
            # Tarefas
            if "tasks" in stories:
                st.markdown("### ‚úÖ Tarefas")
                
                for i, task in enumerate(stories["tasks"], 1):
                    with st.expander(f"Tarefa {i}: {task['title']}"):
                        st.markdown(f"**Descri√ß√£o:** {task['description']}")
                        if task.get('estimate'):
                            st.markdown(f"**Estimativa:** {task['estimate']}")
            
            # Bot√£o para limpar resultados
            if st.button("üóëÔ∏è Limpar Resultados", key="clear_results"):
                set_session_value("generated_stories", None)
                st.rerun()
    
    def _display_history(self):
        """
        Exibe o hist√≥rico de opera√ß√µes realizadas.
        """
        history = get_session_value("operation_history", [])
        story_history = [op for op in history if op["operation"] == "story_generation"]
        
        if story_history:
            with st.expander("üìö Hist√≥rico de Gera√ß√µes"):
                st.markdown(f"**Total de gera√ß√µes:** {len(story_history)}")
                
                for i, entry in enumerate(reversed(story_history[-5:]), 1):
                    st.markdown(f"**Gera√ß√£o {i}:**")
                    if entry["result"].get("epic"):
                        st.markdown(f"- √âpico: {entry['result']['epic']['title']}")
                    if entry["result"].get("stories"):
                        st.markdown(f"- Hist√≥rias: {len(entry['result']['stories'])}")
                    if entry["result"].get("tasks"):
                        st.markdown(f"- Tarefas: {len(entry['result']['tasks'])}")
                    st.markdown("---")
