"""
P√°gina Code Tester do CodeGuardian usando Streamlit.

Esta p√°gina permite ao usu√°rio gerar testes unit√°rios
a partir do c√≥digo-fonte inserido ou enviado.
"""

import streamlit as st
from pathlib import Path
import sys
import requests

# Adicionar diret√≥rio raiz ao path
root_dir = Path(__file__).parent.parent.parent
sys.path.insert(0, str(root_dir))

from app.pages.base_page import BasePage
from app.utils.session_state import get_session_value, set_session_value


class CodeTesterPage(BasePage):
    """
    Classe representando a p√°gina Code Tester.
    """
    
    def __init__(self):
        super().__init__("Code Tester", "üß™")
        self.api_base_url = get_session_value("api_base_url", "http://localhost:8000/api/v1")
    
    def render(self):
        """
        Renderiza a p√°gina Code Tester no Streamlit.
        """
        st.title("üß™ Code Tester")
        
        # Explica√ß√£o da funcionalidade
        st.markdown("## Gera√ß√£o de Testes Unit√°rios")
        st.info(
            """
            Esta ferramenta gera testes unit√°rios a partir do c√≥digo-fonte fornecido.
            """
        )
        
        # Instru√ß√µes de uso
        with st.expander("üìñ Como usar"):
            st.markdown("""
            1. **Escolha o m√©todo de entrada**: Cole o c√≥digo, envie um arquivo ou forne√ßa uma URL do GitLab.
            2. **Clique em Gerar**: O agente criar√° testes unit√°rios baseados no c√≥digo fornecido.
            3. **Revise e ajuste**: Valide se os testes gerados atendem suas expectativas.
            """)
        
        # Upload de arquivo
        uploaded_file = st.file_uploader("Fa√ßa upload do arquivo de c√≥digo", type=["py", "js"])
        set_session_value("uploaded_file", uploaded_file)

        # Entrada de c√≥digo manual ou URL
        code_input_method = st.radio(
            "Escolha o m√©todo de entrada:",
            ("text", "url"),
            index=0,
            format_func=lambda x: "Texto Manual" if x == "text" else "URL GitLab"
        )
        set_session_value("code_input_method", code_input_method)
        
        # Input de c√≥digo manual
        if code_input_method == "text":
            code_input = st.text_area(
                "Insira o c√≥digo:",
                height=200,
                placeholder="Cole aqui o c√≥digo-fonte para gerar testes unit√°rios"
            )
            set_session_value("code_input", code_input)
        
        # URL do GitLab
        if code_input_method == "url":
            gitlab_url = st.text_input(
                "Informe a URL do reposit√≥rio GitLab:",
                value=get_session_value("gitlab_url", "")
            )
            set_session_value("gitlab_url", gitlab_url)
        
        # Bot√£o para gerar testes
        if st.button("üöÄ Gerar Testes"):
            if code_input_method == "text" and code_input.strip():
                self._generate_tests(code=code_input)
            elif code_input_method == "url" and gitlab_url.strip():
                self._generate_tests(gitlab_url=gitlab_url)
            elif uploaded_file is not None:
                self._generate_tests(file=uploaded_file)
            else:
                st.error("‚ùå Forne√ßa o c√≥digo, fa√ßa upload de um arquivo ou informe a URL.")
        
        # √Årea de resultados
        self._display_results()
    
    def _generate_tests(self, code=None, gitlab_url=None, file=None):
        """
        Gera testes unit√°rios usando a API do backend.
        
        Args:
            code: C√≥digo fonte para gerar testes (opcional)
            gitlab_url: URL do reposit√≥rio GitLab (opcional)
            file: Arquivo de c√≥digo para gerar testes (opcional)
        """
        set_session_value("tests_loading", True)
        
        with st.spinner("‚öôÔ∏è Gerando testes... Por favor, aguarde."):
            try:
                if file:
                    # Handle file upload
                    files = {"file": (file.name, file.getvalue())}
                    response = requests.post(
                        f"{self.api_base_url}/code/tests/generate", files=files
                    )
                else:
                    # Use code or URL
                    payload = {"code": code, "gitlab_url": gitlab_url}
                    response = requests.post(
                        f"{self.api_base_url}/code/tests/generate", json=payload
                    )
                
                if response.status_code == 200:
                    tests = response.json()
                    set_session_value("generated_tests", tests)
                    st.success("‚úÖ Testes gerados com sucesso!")
                else:
                    st.error(f"‚ùå Erro na API: {response.status_code} - {response.text}")
            except requests.exceptions.ConnectionError:
                st.error("‚ùå N√£o foi poss√≠vel conectar √† API. Verifique se o backend est√° rodando.")
            except Exception as e:
                st.error(f"‚ùå Erro inesperado: {str(e)}")
        
        set_session_value("tests_loading", False)
    
    def _display_results(self):
        """
        Exibe os resultados dos testes gerados.
        """
        tests = get_session_value("generated_tests")
        
        if tests:
            st.markdown("## üß™ Testes Gerados")
            
            for i, test in enumerate(tests.get("tests", []), 1):
                with st.expander(f"Teste {i}"):
                    st.code(test, language="python")

            # Bot√£o para limpar resultados
            if st.button("üóëÔ∏è Limpar Resultados", key="clear_test_results"):
                set_session_value("generated_tests", None)
                st.experimental_rerun()
