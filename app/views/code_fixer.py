"""
P√°gina Code Fixer do CodeGuardian usando Streamlit.

Esta p√°gina permite ao usu√°rio identificar e corrigir bugs
a partir da mensagem de erro e do c√≥digo relevante.
"""

import streamlit as st
from pathlib import Path
import sys
import requests
import base64

# Adicionar diret√≥rio raiz ao path
root_dir = Path(__file__).parent.parent.parent
sys.path.insert(0, str(root_dir))

from app.utils.session_state import get_session_value, set_session_value


class CodeFixerPage:
    """
    Classe representando a p√°gina Code Fixer.
    """
    
    def __init__(self):
        self.api_base_url = get_session_value("api_base_url", "http://localhost:8000/api/v1")

    def render(self):
        """
        Renderiza a p√°gina Code Fixer no Streamlit.
        """
        st.title("üõ†Ô∏è Code Fixer")
        
        # Explica√ß√£o da funcionalidade
        st.markdown("## Identifica√ß√£o e Corre√ß√£o de Bugs")
        st.info(
            """
            Esta ferramenta ajuda a identificar e corrigir bugs de c√≥digo com base
            na descri√ß√£o do erro e no trecho de c√≥digo fornecido.
            """
        )
        
        # Instru√ß√µes de uso
        with st.expander("üìñ Como usar"):
            st.markdown("""
            1. **Descreva a mensagem de erro e o c√≥digo problem√°tico**: Informe detalhes claros.
            2. **Clique em Corrigir**: O agente analisar√° o c√≥digo e sugerir√° corre√ß√µes.
            3. **Revise e ajuste**: Valide se as corre√ß√µes atendem suas expectativas.
            """)

        # Separador
        st.markdown("---")
        
        # Entrada de dados
        st.markdown("## üìù Descri√ß√£o do Bug e C√≥digo")

        # Sele√ß√£o de linguagem
        language_options = {
            "Python": "python",
            "JavaScript": "javascript",
            "TypeScript": "typescript",
            "Java": "java",
            "C#": "csharp",
            "Go": "go",
            "Rust": "rust",
            "PHP": "php"
        }
        
        selected_language = st.selectbox(
            "üî§ Selecione a linguagem do c√≥digo:",
            options=list(language_options.keys()),
            index=0,
            help="Escolha a linguagem de programa√ß√£o do c√≥digo com bug"
        )
        language_code = language_options[selected_language]
        set_session_value("selected_language", language_code)

        # Mensagem de erro
        error_message = st.text_area(
            "Informe a mensagem de erro:",
            height=80,
            placeholder="Exemplo: NameError: name 'variavel' is not defined"
        )
        set_session_value("error_message", error_message)

        # C√≥digo problem√°tico
        bug_code = st.text_area(
            "Insira o c√≥digo problem√°tico:",
            height=200,
            placeholder="Cole aqui o trecho de c√≥digo que gerou o bug"
        )
        set_session_value("bug_code", bug_code)
        
        # Bot√£o para corrigir c√≥digo
        if st.button("üöÄ Corrigir C√≥digo"):
            if error_message.strip() and bug_code.strip() and language_code:
                self._fix_code(error_message, bug_code, language_code)
            else:
                missing_fields = []
                if not error_message.strip():
                    missing_fields.append("mensagem de erro")
                if not bug_code.strip():
                    missing_fields.append("c√≥digo com bug")
                if not language_code:
                    missing_fields.append("linguagem")
                
                st.error(f"‚ùå Campos obrigat√≥rios faltantes: {', '.join(missing_fields)}")
        
        # √Årea de resultados
        self._display_results()
    
    def _fix_code(self, error_message: str, bug_code: str, language: str):
        """
        Corrige o c√≥digo usando a API do backend.
        
        Args:
            error_message: Mensagem de erro fornecida pelo usu√°rio
            bug_code: C√≥digo fonte com o bug
            language: Linguagem de programa√ß√£o
        """
        set_session_value("fix_loading", True)
        
        with st.spinner("üîß Corrigindo c√≥digo... Por favor, aguarde."):
            try:
                # Valida√ß√£o dos campos obrigat√≥rios
                if not error_message.strip():
                    st.error("‚ùå Mensagem de erro √© obrigat√≥ria")
                    return
                if not bug_code.strip():
                    st.error("‚ùå C√≥digo com bug √© obrigat√≥rio")
                    return
                if not language:
                    st.error("‚ùå Linguagem √© obrigat√≥ria")
                    return
                
                # Payload no formato correto esperado pela API
                payload = {
                    "code_with_bug": bug_code,
                    "error_description": error_message,
                    "language": language
                }
                
                st.write("**DEBUG - Fazendo requisi√ß√£o para:**", f"{self.api_base_url}/fix/bugs")
                st.write("**DEBUG - Payload:**")
                st.json(payload)
                
                response = requests.post(
                    f"{self.api_base_url}/fix/bugs",
                    json=payload,
                    timeout=30
                )
                
                st.write("**DEBUG - Status Code da resposta:**", response.status_code)
                st.write("**DEBUG - Headers da resposta:**", dict(response.headers))
                
                if response.status_code in [200, 201]:
                    # Processar resposta da API
                    fixed_code, explanation, changes_made, prevention_tips = self._process_api_response(response)
                    
                    if fixed_code is None:
                        st.error("‚ùå Erro ao processar resposta da API")
                        return
                    
                    # Armazenar dados na sess√£o
                    set_session_value("fixed_code", fixed_code)
                    set_session_value("fix_explanation", explanation)
                    set_session_value("fix_changes", changes_made)
                    set_session_value("fix_prevention_tips", prevention_tips)
                    
                    st.success("‚úÖ C√≥digo corrigido com sucesso!")
                    st.rerun()
                        
                else:
                    st.error(f"‚ùå Erro na API: {response.status_code} - {response.text}")
                    
            except requests.exceptions.ConnectionError:
                st.error("‚ùå N√£o foi poss√≠vel conectar √† API. Verifique se o backend est√° rodando.")
                # Mock para desenvolvimento
                self._generate_mock_fix(error_message, bug_code)
            except requests.exceptions.Timeout:
                st.error("‚è±Ô∏è Timeout na requisi√ß√£o. Tente novamente.")
            except requests.exceptions.RequestException as e:
                st.error(f"‚ùå Erro na requisi√ß√£o: {str(e)}")
            except ValueError as e:
                st.error(f"‚ùå Erro de valida√ß√£o: {str(e)}")
            except Exception as e:
                st.error(f"‚ùå Erro inesperado: {str(e)}")
        
        set_session_value("fix_loading", False)
    
    def _process_api_response(self, response):
        """
        Processa a resposta da API para extrair os dados corretamente.
        
        Args:
            response: Resposta da requisi√ß√£o HTTP
            
        Returns:
            tuple: (fixed_code, explanation, changes_made, prevention_tips)
        """
        try:
            import json
            
            # Obter dados JSON da resposta
            response_data = response.json()
            
            # DEBUG: Verificar tipo e conte√∫do da resposta
            st.write("**DEBUG - Tipo da resposta:**", type(response_data))
            st.write("**DEBUG - Resposta completa:**")
            st.json(response_data)
            
            # Verificar se a resposta √© uma string JSON que precisa ser parseada novamente
            if isinstance(response_data, str):
                try:
                    response_data = json.loads(response_data)
                except json.JSONDecodeError:
                    st.error("‚ùå Erro ao processar resposta da API - formato JSON inv√°lido")
                    return None, None, None, None
            
            # Caso especial: se toda a resposta est√° aninhada como string
            if isinstance(response_data, str) and response_data.strip().startswith('{'):
                try:
                    response_data = json.loads(response_data)
                except json.JSONDecodeError:
                    pass
            
            # Extrair dados da resposta
            fixed_code = response_data.get("fixed_code", "")
            explanation = response_data.get("explanation", "")
            changes_made = response_data.get("changes_made", [])
            prevention_tips = response_data.get("prevention_tips", [])
            
            # Caso especial: verificar se fixed_code cont√©m JSON aninhado
            if isinstance(fixed_code, str) and fixed_code.strip().startswith('{'):
                try:
                    # Se fixed_code for um JSON string, parsear e extrair o c√≥digo
                    parsed_data = json.loads(fixed_code)
                    if isinstance(parsed_data, dict):
                        actual_fixed_code = parsed_data.get("fixed_code", fixed_code)
                        actual_explanation = parsed_data.get("explanation", explanation or "")
                        actual_changes = parsed_data.get("changes_made", changes_made or [])
                        actual_prevention_tips = parsed_data.get("prevention_tips", prevention_tips or [])
                        
                        fixed_code = actual_fixed_code
                        explanation = actual_explanation
                        changes_made = actual_changes
                        prevention_tips = actual_prevention_tips
                except json.JSONDecodeError:
                    # Se n√£o conseguir parsear, usar o valor original
                    pass
            
            # Validar se temos pelo menos o c√≥digo corrigido
            if not fixed_code:
                st.error("‚ùå C√≥digo corrigido n√£o encontrado na resposta da API")
                return None, None, None, None
            
            return fixed_code, explanation, changes_made, prevention_tips
            
        except Exception as e:
            st.error(f"‚ùå Erro ao processar resposta da API: {str(e)}")
            return None, None, None, None
    
    def _generate_mock_fix(self, error_message: str, bug_code: str):
        """
        Gera corre√ß√µes mockadas para desenvolvimento/demonstra√ß√£o.
        
        Args:
            error_message: Mensagem de erro fornecida
            bug_code: C√≥digo com bug fornecido
        """
        # An√°lise b√°sica do tipo de erro para gerar corre√ß√£o apropriada
        error_lower = error_message.lower()
        
        if "nameerror" in error_lower or "not defined" in error_lower:
            # Erro de vari√°vel n√£o definida
            fixed_code = self._fix_name_error(bug_code, error_message)
        elif "syntaxerror" in error_lower or "invalid syntax" in error_lower:
            # Erro de sintaxe
            fixed_code = self._fix_syntax_error(bug_code, error_message)
        elif "indentationerror" in error_lower or "unexpected indent" in error_lower:
            # Erro de indenta√ß√£o
            fixed_code = self._fix_indentation_error(bug_code, error_message)
        elif "typeerror" in error_lower:
            # Erro de tipo
            fixed_code = self._fix_type_error(bug_code, error_message)
        elif "indexerror" in error_lower or "list index out of range" in error_lower:
            # Erro de √≠ndice
            fixed_code = self._fix_index_error(bug_code, error_message)
        elif "keyerror" in error_lower:
            # Erro de chave
            fixed_code = self._fix_key_error(bug_code, error_message)
        elif "attributeerror" in error_lower:
            # Erro de atributo
            fixed_code = self._fix_attribute_error(bug_code, error_message)
        else:
            # Corre√ß√£o gen√©rica
            fixed_code = self._fix_generic_error(bug_code, error_message)
        
        # Adicionar coment√°rios explicativos
        fixed_code = self._add_explanation_comments(fixed_code, error_message)
        
        # Gerar dados mockados adicionais para demonstra√ß√£o
        explanation = self._generate_mock_explanation(error_message)
        changes = self._generate_mock_changes(error_message)
        prevention_tips = self._generate_mock_prevention_tips(error_message)
        
        set_session_value("fixed_code", fixed_code)
        set_session_value("fix_explanation", explanation)
        set_session_value("fix_changes", changes)
        set_session_value("fix_prevention_tips", prevention_tips)
        st.info("üí° Usando corre√ß√£o mockada para demonstra√ß√£o")
    
    def _fix_name_error(self, code: str, error: str) -> str:
        """Corrige erros de NameError."""
        return f'''# CORRE√á√ÉO APLICADA: NameError
# Erro original: {error}

# Vari√°veis foram definidas antes do uso
resultado = 0
variavel = "valor_exemplo"
contador = 1

{code}

# Coment√°rio: Certifique-se de que todas as vari√°veis est√£o definidas antes de serem usadas'''
    
    def _fix_syntax_error(self, code: str, error: str) -> str:
        """Corrige erros de sintaxe."""
        # Adiciona par√™nteses faltantes e corrige sintaxe b√°sica
        fixed = code.replace("print ", "print(")
        if "print(" in fixed and not fixed.endswith(")"):
            fixed += ")"
        
        return f'''# CORRE√á√ÉO APLICADA: SyntaxError
# Erro original: {error}

{fixed}

# Coment√°rio: Sintaxe corrigida - par√™nteses adicionados onde necess√°rio'''
    
    def _fix_indentation_error(self, code: str, error: str) -> str:
        """Corrige erros de indenta√ß√£o."""
        lines = code.split('\n')
        fixed_lines = []
        
        for line in lines:
            if line.strip() and not line.startswith(' ') and not line.startswith('\t'):
                if any(keyword in line for keyword in ['if', 'for', 'while', 'def', 'class']):
                    fixed_lines.append(line)
                else:
                    fixed_lines.append('    ' + line)  # Adiciona indenta√ß√£o
            else:
                fixed_lines.append(line)
        
        return f'''# CORRE√á√ÉO APLICADA: IndentationError
# Erro original: {error}

{"".join(fixed_lines)}

# Coment√°rio: Indenta√ß√£o corrigida - use 4 espa√ßos por n√≠vel'''
    
    def _fix_type_error(self, code: str, error: str) -> str:
        """Corrige erros de tipo."""
        return f'''# CORRE√á√ÉO APLICADA: TypeError
# Erro original: {error}

# Convers√µes de tipo adicionadas
{code}

# Exemplo de corre√ß√µes comuns:
# str(numero) para converter n√∫mero em string
# int(texto) para converter string em inteiro
# list(iteravel) para converter em lista

# Coment√°rio: Verifique os tipos de dados antes de opera√ß√µes'''
    
    def _fix_index_error(self, code: str, error: str) -> str:
        """Corrige erros de √≠ndice."""
        return f'''# CORRE√á√ÉO APLICADA: IndexError
# Erro original: {error}

# Verifica√ß√£o de √≠ndice adicionada
if len(lista) > 0:  # Verifica se a lista n√£o est√° vazia
    {code}
else:
    print("Lista vazia ou √≠ndice inv√°lido")

# Coment√°rio: Sempre verifique o tamanho da lista antes de acessar √≠ndices'''
    
    def _fix_key_error(self, code: str, error: str) -> str:
        """Corrige erros de chave."""
        return f'''# CORRE√á√ÉO APLICADA: KeyError
# Erro original: {error}

# Verifica√ß√£o de chave adicionada
if 'chave' in dicionario:  # Verifica se a chave existe
    {code}
else:
    print("Chave n√£o encontrada no dicion√°rio")

# Alternativa: usar dicionario.get('chave', 'valor_padrao')

# Coment√°rio: Sempre verifique se a chave existe antes de acess√°-la'''
    
    def _fix_attribute_error(self, code: str, error: str) -> str:
        """Corrige erros de atributo."""
        return f'''# CORRE√á√ÉO APLICADA: AttributeError
# Erro original: {error}

# Verifica√ß√£o de atributo adicionada
if hasattr(objeto, 'atributo'):  # Verifica se o atributo existe
    {code}
else:
    print("Atributo n√£o encontrado no objeto")

# Coment√°rio: Use hasattr() para verificar se um atributo existe'''
    
    def _fix_generic_error(self, code: str, error: str) -> str:
        """Corre√ß√£o gen√©rica para outros tipos de erro."""
        return f'''# CORRE√á√ÉO SUGERIDA
# Erro original: {error}

# C√≥digo com tratamento de erro adicionado
try:
    {code}
except Exception as e:
    print(f"Erro capturado: {{e}}")
    # Adicione aqui o tratamento apropriado

# Coment√°rio: Considere adicionar tratamento de exce√ß√µes espec√≠fico'''
    
    def _add_explanation_comments(self, code: str, error: str) -> str:
        """Adiciona coment√°rios explicativos ao c√≥digo corrigido."""
        explanation = f'''{code}

# === EXPLICA√á√ÉO DA CORRE√á√ÉO ===
# Erro detectado: {error}
# 
# Corre√ß√µes aplicadas:
# 1. Verifica√ß√µes de seguran√ßa adicionadas
# 2. Tratamento de casos especiais implementado
# 3. Coment√°rios explicativos inclu√≠dos
# 
# Dicas para evitar erros similares:
# - Sempre inicialize vari√°veis antes de usar
# - Verifique tipos de dados antes de opera√ß√µes
# - Use try/except para tratar exce√ß√µes
# - Teste com diferentes cen√°rios de entrada
'''
        return explanation
    
    def _generate_fixed_code_txt(self, fixed_code: str) -> str:
        """
        Gera o conte√∫do em formato TXT do c√≥digo corrigido.
        
        Args:
            fixed_code: C√≥digo corrigido
            
        Returns:
            str: Conte√∫do formatado em texto
        """
        from datetime import datetime
        
        # Recuperar informa√ß√µes da sess√£o
        error_message = get_session_value("error_message", "N√£o especificado")
        bug_code = get_session_value("bug_code", "N√£o especificado")
        
        txt_content = []
        txt_content.append("=" * 80)
        txt_content.append("                   C√ìDIGO CORRIGIDO - CODE GUARDIAN")
        txt_content.append("=" * 80)
        txt_content.append(f"Data de corre√ß√£o: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        txt_content.append("=" * 80)
        txt_content.append("")
        
        # Informa√ß√µes do bug original
        txt_content.append("üêõ INFORMA√á√ïES DO BUG ORIGINAL")
        txt_content.append("-" * 50)
        txt_content.append(f"Mensagem de erro: {error_message}")
        txt_content.append("")
        txt_content.append("C√≥digo problem√°tico:")
        bug_lines = bug_code.split('\n')
        for line in bug_lines:
            txt_content.append(f"  {line}")
        txt_content.append("")
        txt_content.append("=" * 80)
        txt_content.append("")
        
        # C√≥digo corrigido
        txt_content.append("üîß C√ìDIGO CORRIGIDO")
        txt_content.append("-" * 50)
        fixed_lines = fixed_code.split('\n')
        for line in fixed_lines:
            txt_content.append(line)
        txt_content.append("")
        txt_content.append("=" * 80)
        txt_content.append("")
        
        # Informa√ß√µes adicionais
        txt_content.append("üìù INFORMA√á√ïES ADICIONAIS")
        txt_content.append("-" * 50)
        txt_content.append("Este arquivo cont√©m a corre√ß√£o gerada pelo CodeGuardian.")
        txt_content.append("")
        txt_content.append("Pr√≥ximos passos recomendados:")
        txt_content.append("1. Revise o c√≥digo corrigido cuidadosamente")
        txt_content.append("2. Teste a solu√ß√£o em um ambiente seguro")
        txt_content.append("3. Implemente as corre√ß√µes em seu projeto")
        txt_content.append("4. Execute testes unit√°rios para validar")
        txt_content.append("")
        txt_content.append("=" * 80)
        txt_content.append("")
        txt_content.append("Gerado pelo CodeGuardian - Code Fixer")
        txt_content.append("")
        
        return "\n".join(txt_content)

    def _display_results(self):
        """
        Exibe os resultados da corre√ß√£o de c√≥digo de forma organizada.
        """
        fixed_code = get_session_value("fixed_code")
        fix_explanation = get_session_value("fix_explanation")
        fix_changes = get_session_value("fix_changes")
        fix_prevention_tips = get_session_value("fix_prevention_tips", [])
        selected_language = get_session_value("selected_language", "python")

        if fixed_code:
            # üîß C√≥digo Corrigido
            st.markdown("## üîß C√≥digo Corrigido")
            st.code(fixed_code, language=selected_language)
            
            st.divider()
            
            # üí° Explica√ß√£o do erro
            if fix_explanation:
                with st.expander("üí° **Explica√ß√£o do Erro**", expanded=True):
                    # Destacar termos importantes em negrito
                    explanation_formatted = fix_explanation
                    # Lista de termos para destacar
                    terms_to_highlight = [
                        "erro", "bug", "problema", "exce√ß√£o", "falha",
                        "NameError", "TypeError", "SyntaxError", "IndexError", "KeyError", "AttributeError",
                        "undefined", "null", "NullPointerException", "segmentation fault"
                    ]
                    
                    for term in terms_to_highlight:
                        explanation_formatted = explanation_formatted.replace(
                            term, f"**{term}**"
                        )
                    
                    st.markdown(explanation_formatted)
            
            # üõ†Ô∏è Altera√ß√µes Realizadas
            if fix_changes and len(fix_changes) > 0:
                with st.expander("üõ†Ô∏è **Altera√ß√µes Realizadas**", expanded=True):
                    for i, change in enumerate(fix_changes, 1):
                        st.markdown(f"{i}. {change}")
            
            # ‚úÖ Dicas para Evitar Erros
            if fix_prevention_tips and len(fix_prevention_tips) > 0:
                with st.expander("‚úÖ **Dicas para Evitar Erros Similares**", expanded=False):
                    for tip in fix_prevention_tips:
                        st.markdown(f"‚Ä¢ {tip}")
            
            st.divider()
            
            # Bot√µes de a√ß√£o
            col1, col2, col3 = st.columns([1, 1, 1])
            
            with col1:
                # Bot√£o para copiar c√≥digo
                # Escape do c√≥digo para JavaScript, preservando UTF-8
                code_escaped = fixed_code.replace('\\', '\\\\').replace('"', '\\"').replace('\n', '\\n').replace('\r', '\\r').replace('\t', '\\t')
                copy_button_id = 'copy-fixed-code-button'
                
                html_content = f"""
                    <button id='{copy_button_id}' style='
                        background-color: #0e1117;
                        color: white;
                        border: 1px solid #262730;
                        border-radius: 0.25rem;
                        padding: 0.25rem 0.75rem;
                        font-size: 14px;
                        cursor: pointer;
                        font-family: "Source Sans Pro", sans-serif;
                        width: 100%;
                    '>üìã Copiar C√≥digo</button>
                    <script>
                        document.getElementById('{copy_button_id}').onclick = function() {{
                            try {{
                                const fixedCode = "{code_escaped}";
                                navigator.clipboard.writeText(fixedCode).then(function() {{
                                    alert('‚úÖ C√≥digo corrigido copiado para a √°rea de transfer√™ncia!');
                                }}).catch(function(err) {{
                                    console.error('Erro ao copiar:', err);
                                    alert('‚ùå Erro ao copiar o c√≥digo. Tente novamente.');
                                }});
                            }} catch(e) {{
                                console.error('Erro:', e);
                                alert('‚ùå Erro ao processar o c√≥digo.');
                            }}
                        }}
                    </script>
                """
                
                st.components.v1.html(
                    html_content,
                    height=40
                )
            
            with col2:
                # Bot√£o para salvar em TXT
                if st.button("üíæ Salvar em TXT", key="save_fixed_code_txt"):
                    txt_content = self._generate_fixed_code_txt(fixed_code)
                    st.download_button(
                        label="üì• Download codigo_corrigido.txt",
                        data=txt_content,
                        file_name="codigo_corrigido.txt",
                        mime="text/plain",
                        key="download_fixed_code_txt"
                    )
            
            with col3:
                # Bot√£o para limpar resultados
                if st.button("üóëÔ∏è Limpar Resultados", key="clear_fix_results"):
                    set_session_value("fixed_code", None)
                    set_session_value("fix_explanation", None)
                    set_session_value("fix_changes", None)
                    set_session_value("fix_prevention_tips", None)
                    st.rerun()
    
    def _generate_mock_explanation(self, error_message: str) -> str:
        """
        Gera explica√ß√£o mockada baseada no tipo de erro.
        
        Args:
            error_message: Mensagem de erro fornecida
            
        Returns:
            str: Explica√ß√£o formatada do erro
        """
        error_lower = error_message.lower()
        
        if "nameerror" in error_lower or "not defined" in error_lower:
            return "O **erro** NameError ocorre quando voc√™ tenta usar uma vari√°vel que n√£o foi definida. Isso acontece quando o Python n√£o consegue encontrar a vari√°vel no escopo atual ou em escopos anteriores."
        elif "syntaxerror" in error_lower or "invalid syntax" in error_lower:
            return "O **erro** SyntaxError indica que h√° um **problema** na estrutura do c√≥digo. Geralmente ocorre por par√™nteses n√£o fechados, dois pontos ausentes ou estruturas mal formadas."
        elif "indentationerror" in error_lower or "unexpected indent" in error_lower:
            return "O **erro** IndentationError acontece quando a indenta√ß√£o do c√≥digo n√£o est√° correta. Python usa indenta√ß√£o para definir blocos de c√≥digo, e ela deve ser consistente."
        elif "typeerror" in error_lower:
            return "O **erro** TypeError ocorre quando voc√™ tenta realizar uma opera√ß√£o em um tipo de dado inadequado. Por exemplo, tentar somar um n√∫mero com uma string sem convers√£o."
        elif "indexerror" in error_lower or "list index out of range" in error_lower:
            return "O **erro** IndexError acontece quando voc√™ tenta acessar um √≠ndice que n√£o existe na lista. Isso geralmente ocorre quando a lista est√° vazia ou o √≠ndice √© maior que o tamanho da lista."
        elif "keyerror" in error_lower:
            return "O **erro** KeyError ocorre quando voc√™ tenta acessar uma chave que n√£o existe em um dicion√°rio. √â importante verificar se a chave existe antes de acess√°-la."
        elif "attributeerror" in error_lower:
            return "O **erro** AttributeError acontece quando voc√™ tenta acessar um atributo ou m√©todo que n√£o existe no objeto. Verifique se o objeto possui o atributo desejado."
        else:
            return "O **erro** identificado requer aten√ß√£o especial. √â importante analisar a **exce√ß√£o** para entender sua causa raiz e implementar a corre√ß√£o adequada."
    
    def _generate_mock_changes(self, error_message: str) -> list:
        """
        Gera lista de altera√ß√µes mockadas baseada no tipo de erro.
        
        Args:
            error_message: Mensagem de erro fornecida
            
        Returns:
            list: Lista de altera√ß√µes realizadas
        """
        error_lower = error_message.lower()
        
        if "nameerror" in error_lower or "not defined" in error_lower:
            return [
                "Adicionadas defini√ß√µes de vari√°veis antes do uso",
                "Inicializadas vari√°veis com valores apropriados",
                "Verifica√ß√£o de escopo das vari√°veis"
            ]
        elif "syntaxerror" in error_lower or "invalid syntax" in error_lower:
            return [
                "Corrigida sintaxe do Python",
                "Adicionados par√™nteses faltantes",
                "Estrutura de c√≥digo reorganizada"
            ]
        elif "indentationerror" in error_lower or "unexpected indent" in error_lower:
            return [
                "Corrigida indenta√ß√£o do c√≥digo",
                "Padronizada para 4 espa√ßos por n√≠vel",
                "Alinhamento de blocos de c√≥digo"
            ]
        elif "typeerror" in error_lower:
            return [
                "Adicionadas convers√µes de tipo",
                "Verifica√ß√£o de tipos antes de opera√ß√µes",
                "Tratamento adequado de diferentes tipos de dados"
            ]
        elif "indexerror" in error_lower or "list index out of range" in error_lower:
            return [
                "Adicionada verifica√ß√£o de tamanho da lista",
                "Implementada valida√ß√£o de √≠ndices",
                "Tratamento para listas vazias"
            ]
        elif "keyerror" in error_lower:
            return [
                "Adicionada verifica√ß√£o de exist√™ncia de chaves",
                "Implementado uso de .get() com valor padr√£o",
                "Tratamento para chaves inexistentes"
            ]
        elif "attributeerror" in error_lower:
            return [
                "Adicionada verifica√ß√£o com hasattr()",
                "Implementada valida√ß√£o de atributos",
                "Tratamento para objetos sem o atributo"
            ]
        else:
            return [
                "Adicionado tratamento de exce√ß√µes",
                "Implementadas verifica√ß√µes de seguran√ßa",
                "Melhorada robustez do c√≥digo"
            ]
    
    def _generate_mock_prevention_tips(self, error_message: str) -> list:
        """
        Gera dicas de preven√ß√£o mockadas baseada no tipo de erro.
        
        Args:
            error_message: Mensagem de erro fornecida
            
        Returns:
            list: Lista de dicas para evitar erros similares
        """
        error_lower = error_message.lower()
        
        if "nameerror" in error_lower or "not defined" in error_lower:
            return [
                "Sempre declare e inicialize vari√°veis antes de us√°-las",
                "Use nomes de vari√°veis descritivos e consistentes",
                "Verifique o escopo das vari√°veis em fun√ß√µes",
                "Considere usar ferramentas de linting como pylint"
            ]
        elif "syntaxerror" in error_lower or "invalid syntax" in error_lower:
            return [
                "Use um editor com destacador de sintaxe",
                "Verifique se todos os par√™nteses, colchetes e chaves est√£o fechados",
                "Mantenha consist√™ncia na indenta√ß√£o",
                "Execute o c√≥digo frequentemente durante o desenvolvimento"
            ]
        elif "indentationerror" in error_lower or "unexpected indent" in error_lower:
            return [
                "Configure seu editor para mostrar espa√ßos e tabs",
                "Use sempre 4 espa√ßos para indenta√ß√£o em Python",
                "Evite misturar tabs e espa√ßos",
                "Use formatadores autom√°ticos como black ou autopep8"
            ]
        elif "typeerror" in error_lower:
            return [
                "Sempre verifique os tipos de dados antes de opera√ß√µes",
                "Use type hints para maior clareza",
                "Implemente valida√ß√£o de entrada",
                "Considere usar ferramentas como mypy para verifica√ß√£o de tipos"
            ]
        elif "indexerror" in error_lower or "list index out of range" in error_lower:
            return [
                "Sempre verifique o tamanho de listas antes de acessar √≠ndices",
                "Use enumerate() quando precisar de √≠ndices em loops",
                "Considere usar try/except para capturar IndexError",
                "Prefira m√©todos como .get() para dicion√°rios"
            ]
        elif "keyerror" in error_lower:
            return [
                "Use o m√©todo .get() com valores padr√£o",
                "Verifique se a chave existe antes de acess√°-la",
                "Considere usar defaultdict para casos espec√≠ficos",
                "Implemente tratamento adequado para chaves ausentes"
            ]
        elif "attributeerror" in error_lower:
            return [
                "Use hasattr() para verificar a exist√™ncia de atributos",
                "Consulte a documenta√ß√£o dos objetos que est√° usando",
                "Implemente verifica√ß√µes defensivas",
                "Considere usar getattr() com valores padr√£o"
            ]
        else:
            return [
                "Implemente tratamento de exce√ß√µes robusto",
                "Escreva testes unit√°rios para seus c√≥digos",
                "Use logging para rastrear problemas",
                "Mantenha seu c√≥digo simples e leg√≠vel",
                "Revise e refatore regularmente seu c√≥digo"
            ]
